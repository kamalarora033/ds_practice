<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:camel="http://camel.apache.org/schema/spring"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">
	
	<!-- To enable the annotations -->
	<bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor" />
    
    <!-- This class is used for JBoss and Camel Integration --> 
	<bean id="jbossResolver" class="org.apachextras.camel.jboss.JBossPackageScanClassResolver" />

	<!-- Setting JNDI environment with JBOSS -->
	<bean id="jndiTemplate" class="org.springframework.jndi.JndiTemplate">
		<property name="environment">
			<props>
				<prop key="java.naming.factory.initial">org.jboss.as.naming.InitialContextFactory</prop>
				<prop key="java.naming.provider.url">remote://localhost:4447</prop>
				<prop key="java.naming.security.principal">jbossmanager</prop>
				<prop key="java.naming.security.credentials">jboss</prop>
			</props>
		</property>
	</bean>

	<!-- Binding the JMS with JBOSS using JNDI -->
	<bean id="jmsQueueConnectionFactory" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiTemplate">
			<ref bean="jndiTemplate" />
		</property>
		<property name="jndiName">
			<value>java:/ConnectionFactory</value>
		</property>
	</bean>

	<!-- Injecting JMS Compmonent -->
	<bean name="jms" class="org.apache.camel.component.jms.JmsComponent">
		<property name="connectionFactory" ref="jmsQueueConnectionFactory" />
	</bean>

	<!-- to use Camel in JBoss we need to define this class resolver -->
	<bean id="downloadLogger" class="com.ericsson.fdp.DownloadLogger" />

	<!-- Camel Context -->
	<camel:camelContext id="notifySMSC">
		
		<!-- Defining the route for Transmitter  -->
		<camel:route id="routetx">
			<camel:from uri="bean:sendsms?method=sendMsg"/>
			<camel:to uri = "jms:queue:smsQueueOut"/>
		</camel:route>
		
		<!-- Defining route from Queue to End Point SMPPServer -->
		<camel:route id="routesender1">
			<camel:from uri="jms:queue:smsQueueOut" />
			<camel:to uri="direct:SMPPServer" />
		</camel:route>
		
		
		<!-- Defining the Route from End Point SMPPServer to EndPoint SMPP1 and SMPP2 using Load Balancer -->
		<camel:route id="routesender2">
			<camel:from uri="direct:SMPPServer" />
			<!-- Defining Load Balancer to redirecting Out Messages to SMPP1 and SMPP2 with Round Robin Strategy -->
			<camel:loadBalance>
				<camel:failover roundRobin="true" maximumFailoverAttempts="10">
					<camel:exception>org.jsmpp.PDUException</camel:exception>
					<camel:exception>org.jsmpp.InvalidResponseException</camel:exception>
					<camel:exception>org.jsmpp.extra.ResponseTimeoutException</camel:exception>
					<camel:exception>org.jsmpp.extra.NegativeResponseException</camel:exception>
					<camel:exception>java.net.ConnectException</camel:exception>
					<camel:exception>java.io.IOException</camel:exception>
					<camel:exception>java.lang.Exception</camel:exception>
				</camel:failover>
				<camel:to uri="direct:SMPP1" />
				<camel:to uri="direct:SMPP2" />
			</camel:loadBalance>
		</camel:route>
		
		<!-- Defining route from End Point SMPP1 to SMSC Server1 -->
		<camel:route id="routesendsmsc1">
			<camel:from uri="direct:SMPP1" />
				<camel:onException>
					<camel:exception>org.jsmpp.PDUException</camel:exception>
					<camel:exception>org.jsmpp.InvalidResponseException</camel:exception>
					<camel:exception>org.jsmpp.extra.ResponseTimeoutException</camel:exception>
					<camel:exception>org.jsmpp.extra.NegativeResponseException</camel:exception>
					<camel:exception>java.net.ConnectException</camel:exception>
					<camel:exception>java.io.IOException</camel:exception>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="25" logHandled="true" logRetryStackTrace="true" />
					<camel:process ref="notificationSMPPExceptionHandler" />
				</camel:onException>
				 <camel:to uri="smpp://smppclient1@localhost:2775?password=password&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;systemType=producer" />
		</camel:route>
		
		<!-- Defining route from End Point SMPP2 to SMSC Server2 -->
		<camel:route id="routesendsmsc2">
			<camel:from uri="direct:SMPP2" />
				<camel:onException>
					<camel:exception>org.jsmpp.PDUException</camel:exception>
					<camel:exception>org.jsmpp.InvalidResponseException</camel:exception>
					<camel:exception>org.jsmpp.extra.ResponseTimeoutException</camel:exception>
					<camel:exception>org.jsmpp.extra.NegativeResponseException</camel:exception>
					<camel:exception>java.net.ConnectException</camel:exception>
					<camel:exception>java.io.IOException</camel:exception>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="25" logHandled="true" logRetryStackTrace="true" />
					<camel:process ref="notificationSMPPExceptionHandler" />
				</camel:onException>
				 <camel:to uri="smpp://smppclient1@localhost:2775?password=password&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;systemType=producer" />
		</camel:route>
		
		
		<!-- Defining the Rx Mode from SMSC through ThrotllerWaterGate , RequestIdGenerator and CircleFinder  to SMS In-Bound Queue -->
		
		<camel:route id="routerecvsmsc1">
			<camel:from uri="smpp://smppclient1@localhost:2775?password=password&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;systemType=consumer" />
				<camel:onException>
					<camel:exception>org.jsmpp.PDUException</camel:exception>
					<camel:exception>org.jsmpp.InvalidResponseException</camel:exception>
					<camel:exception>org.jsmpp.extra.ResponseTimeoutException</camel:exception>
					<camel:exception>org.jsmpp.extra.NegativeResponseException</camel:exception>
					<camel:exception>java.net.ConnectException</camel:exception>
					<camel:exception>java.io.IOException</camel:exception>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="25" logHandled="true" logRetryStackTrace="true" />
				</camel:onException>
				<camel:to uri="direct:End"/>
		</camel:route>
		
		<camel:route id="routerecvsmsc2">
			<camel:from uri="smpp://smppclient1@localhost:2778?password=password&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;systemType=consumer" />
				<camel:onException>
					<camel:exception>org.jsmpp.PDUException</camel:exception>
					<camel:exception>org.jsmpp.InvalidResponseException</camel:exception>
					<camel:exception>org.jsmpp.extra.ResponseTimeoutException</camel:exception>
					<camel:exception>org.jsmpp.extra.NegativeResponseException</camel:exception>
					<camel:exception>java.net.ConnectException</camel:exception>
					<camel:exception>java.io.IOException</camel:exception>
					<camel:exception>java.lang.Exception</camel:exception>
					<camel:redeliveryPolicy maximumRedeliveries="3" redeliveryDelay="25" logHandled="true" logRetryStackTrace="true" />
				</camel:onException>
				<camel:to uri="direct:End"/>
		</camel:route>
		
		<camel:route id="r1">
			<camel:from uri="direct:End"/>
			<camel:to uri="jms:queue:smsQueueIn"/>
		</camel:route>
		
		<!-- Defining route from In-Bound Queue to Mock End Point -->
		<camel:route id= "routerecvfromqueue">
			<camel:from uri="jms:queue:smsQueueIn"/>
			<camel:to uri="mock:result"/>
			<!-- <camel:to uri="bean:recvsms?method=recvMsg"/> -->
		</camel:route>
	</camel:camelContext>
	
	<bean id="throttler" class="com.ericsson.fdp.ThrotllerWaterGate" />
	<bean id="reqidgntr" class="com.ericsson.fdp.RequestIdGenerator" />
	<bean id="circlefinder" class="com.ericsson.fdp.CircleFinder" />
	<bean id="sendsms" class="com.ericsson.fdp.SendSMS"/>
	<bean id="recvsms" class="com.ericsson.fdp.ReceiveSMS"/>
	<bean id="notificationSMPPExceptionHandler" class="com.ericsson.fdp.NotificationSMPPExceptionHandler" />


</beans>


